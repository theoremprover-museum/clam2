/* -*- Mode: Prolog -*-
 * @(#)$Id: generalise,v 1.8 1998/09/15 16:00:38 img Exp $
 *
 * $Log: generalise,v $
 * Revision 1.8  1998/09/15 16:00:38  img
 * use immediate/[1,2]; indentation changes
 *
 * Revision 1.7  1998/08/26 12:56:45  img
 * check FV condition
 *
 * Revision 1.6  1998/07/30 16:07:05  img
 * Dont drop unnecessary quantifiers
 *
 * Revision 1.5  1998/06/10 09:26:38  img
 * flag failure to type-guess
 *
 * Revision 1.4  1996/11/02 13:56:25  img
 * Don't generalize propositions/atomic definitions.
 *
 * Revision 1.3  1996/07/10  09:02:44  img
 * use type_of/3.
 *
 * Revision 1.2  1995/10/03  12:52:40  img
 * remove annotaion from goal in preconditions rather than postconditions.
 *
 * Revision 1.1  1994/09/16  09:33:29  dream
 * Initial revision
 *
 */

	% GENERALISE METHOD:
	% Replace a common subterm in both halves of an
	% - equality, or
	% - implication, or
	% - inequality
	% by a new variable.
	% Disallow generalising over object-level variables, and over 
        % terms containing meta-level variables (too dangerous), and 
        % over constant object-level terms, and over terms containing 
        % wave-fronts.  Remove annotations since we are giving up on
	% the present induction (if any).
/* original 
method(generalise(Exp,Var:Type),
       H==>GG,
       [strip_meta_annotations(GG,G),
	matrix(Vs,M,G),
        member(M,[(L=R in _),(L=>R),geq(L,R),leq(L,R),greater(L,R),less(L,R)]),
        exp_at(L,Pos1,Exp), \+ Pos1 =[0|_],
        not atomic(Exp),        % disallow generalising object-level variables
        not constant(Exp,_),    % Exp must not be a constant term.
        not Exp = {_},          % don't generalise atomic definitions
        object_level_term(Exp), % Exp must not contain meta-vars or wave fronts
        exp_at(R,Pos2,Exp),\+ Pos2 =[0|_],
        type_of(H,Exp,Type),
	\+ Type = u(_),         % don't generalise over propositions
	ground(Type),
        append(Vs,H,VsH),
        hfree([Var],VsH)], 
       [replace_all(Exp,Var,G, NewG)],
       [H==>Var:Type=>NewG],
       generalise(Exp,Var:Type)).
*/

/* generalized to uniform treatment of binary predicates */
method(generalise(Exp,Var:Type),
       H==>GG,
       [strip_meta_annotations(GG,G),
	matrix(Vs,M,G),	compound(M),
        append(Vs,H,VsH),	        % extend the context for type-guessing
	(member(M,[(L=R in _),(L=>R)]) orelse
	     (M =.. [P,L,R],
	      type_of(H,M,u(_)))),
        exp_at(L,Pos1,Exp), \+ Pos1 =[0|_],
	not Exp = (_ = _),	% want _=_ in _
        not atomic(Exp),        % disallow generalising object-level variables
        not constant(Exp,_),    % Exp must not be a constant term.
        not Exp = {_},          % don't generalise atomic definitions
        exp_at(R,Pos2,Exp),\+ Pos2 =[0|_],
        object_level_term(Exp), % Exp must not contain meta-vars or wave fronts
	Exp =.. [Func|_],
        (type_of(VsH,Exp,Type) -> true;
	 (clam_warning('Cannot guess type of %t(...)\n',[Func]),fail)),
	\+ Type = u(_),         % don't generalise over propositions
	ground(Type),		% or if the type cannot be guessed
	freevarsinterm(Exp,ExpFV),
	hfree([Var],VsH),
	replace_all(Exp,Var,M, NewM),
	/* ensure that the generalized term contains only free
	variables from the context: e.g., don't generalise double(z)
	in
         (z:pnat#v0=double(z)in pnat)=>z:pnat#s(s(v0))=double(z)in pnat
        */
        forall(XXX,ExpFV,(member(XXX:_,Vs);member(XXX:_,H))),
	/* Is there any advantage in minimising the prefix? */
%	freevarsinterm(NewM,NewMFV),
%	disjoint(NewMFV,ExpFV), % dont generalize a term if there are shared vars
%	map_list_filter(Vs,(V1:T1):=>(V1:T1),member(V1,NewMFV),NewVs),
	NewVs=Vs,
        append(VsH,[Var:Type],VsHVT),
	\+ trivially_falsifiable(VsHVT,NewM)],
       [matrix(NewVs,NewM,NewG)],
       [H==>Var:Type=>NewG],
       generalise(Exp,Var:Type)).


/* experimental: generalize a term containing variables that don't
   appear elsewhere */
%%% method(generalise(Exp,Var:Type),
%%%        H==>GG,
%%%        [strip_meta_annotations(GG,G),
%%% 	matrix(Vs,M,G),
%%%         append(Vs,H,VsH),
%%%         hfree([Var],VsH),
%%%         exp_at(M,Pos,Exp), \+ Pos =[0|_],
%%%         not atomic(Exp),        % disallow generalising object-level variables
%%%         not constant(Exp,_),    % Exp must not be a constant term.
%%%         not Exp = {_},          % don't generalise atomic definitions
%%%         object_level_term(Exp), % Exp must not contain meta-vars or wave fronts
%%% 	freevarsinterm(Exp,FVs),
%%% 	replace(Pos,Var,M, NewM),
%%% 	freevarsinterm(NewM,MFVs),	
%%% 	disjoint(FVs,MFVs),
%%%         type_of(VsH,Exp,Type),
%%% 	ground(Type),
%%% 	\+ Type = u(_),         % don't generalise over propositions
%%% 	true], 
%%%        [matrix(Vs,NewM,NewG)],
%%%        [H==>Var:Type=>NewG],
%%%        generalise(Exp,Var:Type)).
