/* -*- Mode: Prolog -*-
 * @(#)$Id: elementary,v 1.10 1998/11/10 16:08:20 img Exp $
 *
 * $Log: elementary,v $
 * Revision 1.10  1998/11/10 16:08:20  img
 * Extract Presburger information from goal; Added elementary(fertilize(_))
 *
 * Revision 1.9  1998/09/15 16:00:33  img
 * use immediate/[1,2]; indentation changes
 *
 * Revision 1.8  1998/07/27 12:43:38  img
 * switch on Presburger
 *
 * Revision 1.7  1998/06/10 09:23:34  img
 * *** empty log message ***
 *
 * Revision 1.6  1998/06/10 08:26:28  img
 * rationalisation: prohibit backtracking
 *
 * Revision 1.5  1997/10/09 17:17:15  img
 * Unify treatment of annotations
 *
 * Revision 1.4  1997/05/08 12:56:16  img
 * Use lpa_dp/2
 *
 * Revision 1.3  1997/05/05 16:13:39  img
 * Place-holder for decision prodecures.
 *
 * Revision 1.2  1997/01/14 10:48:50  img
 * Integration of decision procedure.
 *
 * Revision 1.1  1994/09/16 09:33:29  dream
 * Initial revision
 */

/* ELEMENTARY METHOD: applies if current method is a trivial instance
   of the hypotheis, a propositional tautology, or a true statement of
   Presburger arithmetic.  */

method(elementary(fertilize(Hyp)),
       H==>G,
       [erase(G,GE),matrix(_,Matrix,GE),
	hyp(Hyp:Hypothesis,H),
        instantiate(H,[],Hypothesis,Matrix,_) ],
       [],
       [],
       elementary(fertilize(Hyp))).

method(elementary(I),
       H==>G,
       [erase_sequent(H==>G,HH==>GG),
	once(((propositional(HH==>GG,I) -> Seqs = []);
	      (using_presburger,
	       presburger_context(H,Arith),
	       precon_matrix([],Arith=>GG,ArithGG),
	       universal_closure(HH,ArithGG,Gclosed),
	       ex(lpa_dp(Gclosed,yes),60),
	       /* can only conclude {false} when entire goal is Presburger */
	       Seqs = [], I = presburger)))],
       [],
       Seqs,
       elementary(I)).
