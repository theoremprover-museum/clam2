/*  This is a proof plan for theorem:
    lesseq: []==>x:pnat=>y:pnat=>((x=y in pnat=>void)#leq(x,y))=>less(x,y)
    planner = dplan, clam_version(2.8.0), oyster_version($Id: lesseq,v 1.13 1999/05/10 13:21:12 img Exp $)

    Time taken to find plan: 40ms
    Environment:
    def(pairord)
    def(snd)
    def(fst)
    def(pred)
    def(leq)
    def(less)
    def(<=>)
    def(true)
    eqn(snd1)
    eqn(fst1)
    eqn(pred2)
    eqn(pred1)
    eqn(leq3)
    eqn(leq2)
    eqn(leq1)
    eqn(less3)
    eqn(less2)
    eqn(less1)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or1)
    eqn(snd1)
    eqn(fst1)
    eqn(pred2)
    eqn(pred1)
    eqn(pred1)
    eqn(cnc_s)
    eqn(cnc_s)
    eqn(leq3)
    eqn(leq3)
    eqn(leq2)
    eqn(leq1)
    eqn(less3)
    eqn(less3)
    eqn(less2)
    eqn(less1)
    eqn(imp2)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and4)
    eqn(and3)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or2)
    eqn(or1)
    eqn(or1)
    eqn(disttwo)
    eqn(disttwo)
    wave(snd1)
    wave(fst1)
    wave(pred2)
    wave(pred1)
    wave(pred1)
    wave(cnc_s)
    wave(cnc_s)
    wave(leq3)
    wave(leq3)
    wave(leq2)
    wave(leq1)
    wave(less3)
    wave(less3)
    wave(less2)
    wave(less1)
    wave(imp2)
    wave(imp2)
    wave(imp1)
    wave(and4)
    wave(and4)
    wave(and3)
    wave(and3)
    wave(and2)
    wave(and1)
    wave(or4)
    wave(or3)
    wave(or2)
    wave(or2)
    wave(or1)
    wave(or1)
    wave(disttwo)
    wave(disttwo)
    red(snd1)
    red(fst1)
    red(pred2)
    red(pred1)
    red(leqzero)
    red(lesszero)
    red(leq3)
    red(leq2)
    red(leq1)
    red(less3)
    red(less2)
    red(less1)
    red(imp2)
    red(imp1)
    red(and4)
    red(and3)
    red(and2)
    red(and1)
    red(or4)
    red(or3)
    red(or2)
    red(or1)
    trs(default)
    cancel(cnc_s)
    thm(lesseq)
    thm(cnc_s)
    thm(leqzero)
    thm(lesszero)
    thm(disttwo)
    lemma(succlemma)
    lemma(ipc_dp_imp_e4)
    lemma(ipc_dp_imp_e3)
    lemma(ipc_dp_imp_e2)
    lemma(cnc_s_bis)
    lemma(succ_nonzero_right)
    lemma(succ_nonzero_left)
    lemma(plesssucc2)
    lemma(plesssucc)
    lemma(list1)
    lemma(arith3)
    lemma(arith2)
    lemma(arith1)
    synth(leq)
    synth(less)
    scheme(pairs)
    scheme(list_primitive)
    scheme(pnat_primitive)
    mthd(base_case/1)
    mthd(generalise/2)
    mthd(ind_strat/1)
    mthd(normalize/1)
    smthd(apply_lemma/1)
    smthd(backchain_lemma/1)
    smthd(base_case/1)
    smthd(cancellation/2)
    smthd(casesplit/1)
    smthd(elementary/1)
    smthd(equal/2)
    smthd(existential/2)
    smthd(fertilization_strong/1)
    smthd(fertilize/2)
    smthd(fertilize_left_or_right/1)
    smthd(induction/1)
    smthd(normal/1)
    smthd(normalize_term/1)
    smthd(pw_fertilize/1)
    smthd(pwf/1)
    smthd(pwf_then_fertilize/2)
    smthd(ripple/2)
    smthd(ripple_and_cancel/1)
    smthd(step_case/1)
    smthd(sym_eval/1)
    smthd(unblock/3)
    smthd(unblock_fertilize_lazy/1)
    smthd(unblock_lazy/1)
    smthd(unblock_then_fertilize/2)
    smthd(unblock_then_wave/2)
    smthd(wave/4)
    smthd(weak_fertilize/4)
 */

/* This is the pretty-printed form
base_case(...)

*/

proof_plan([]==>x:pnat=>y:pnat=>((x=y in pnat=>void)#leq(x,y))=>less(x,y),lesseq,40,base_case(elementary(presburger)),dplan).
