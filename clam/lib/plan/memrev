/*  This is a proof plan for theorem:
    memrev: []==>x:int=>y:int list=>member(x,y)=>member(x,rev(y))
    planner = dplan, clam_version(2.8.1), oyster_version($Id: memrev,v 1.16 1999/05/10 13:21:19 img Exp $)

    Time taken to find plan: 1240ms
    Environment:
    def(rev)
    def(app)
    def(member)
    def(<=>)
    def(true)
    eqn(rev2)
    eqn(rev1)
    eqn(app2)
    eqn(app1)
    eqn(member3)
    eqn(member2)
    eqn(member1)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or1)
    eqn(memapp3)
    eqn(memapp3)
    eqn(rev2)
    eqn(rev2)
    eqn(rev1)
    eqn(rev1)
    eqn(app2)
    eqn(app2)
    eqn(app1)
    eqn(member3)
    eqn(member3)
    eqn(member2)
    eqn(member2)
    eqn(member1)
    eqn(imp2)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and4)
    eqn(and3)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or2)
    eqn(or1)
    eqn(or1)
    eqn(disttwo)
    eqn(disttwo)
    wave(memapp3)
    wave(memapp3)
    wave(rev2)
    wave(rev2)
    wave(rev1)
    wave(rev1)
    wave(app2)
    wave(app2)
    wave(app1)
    wave(member3)
    wave(member3)
    wave(member2)
    wave(member2)
    wave(member1)
    wave(imp2)
    wave(imp2)
    wave(imp1)
    wave(and4)
    wave(and4)
    wave(and3)
    wave(and3)
    wave(and2)
    wave(and1)
    wave(or4)
    wave(or3)
    wave(or2)
    wave(or2)
    wave(or1)
    wave(or1)
    wave(disttwo)
    wave(disttwo)
    red(rev2)
    red(rev1)
    red(app2)
    red(app1)
    red(member3)
    red(member3)
    red(member2)
    red(member2)
    red(member1)
    red(imp2)
    red(imp1)
    red(and4)
    red(and3)
    red(and2)
    red(and1)
    red(or4)
    red(or3)
    red(or2)
    red(or1)
    trs(default)
    thm(memrev)
    thm(memapp3)
    thm(disttwo)
    lemma(deceqint)
    lemma(ipc_dp_imp_e4)
    lemma(ipc_dp_imp_e3)
    lemma(ipc_dp_imp_e2)
    lemma(cnc_s_bis)
    lemma(succ_nonzero_right)
    lemma(succ_nonzero_left)
    lemma(plesssucc2)
    lemma(plesssucc)
    lemma(list1)
    lemma(arith3)
    lemma(arith2)
    lemma(arith1)
    synth(member)
    scheme(list_primitive)
    scheme(pnat_primitive)
    mthd(base_case/1)
    mthd(generalise/2)
    mthd(ind_strat/1)
    mthd(normalize/1)
    smthd(apply_lemma/1)
    smthd(backchain_lemma/1)
    smthd(base_case/1)
    smthd(cancellation/2)
    smthd(casesplit/1)
    smthd(elementary/1)
    smthd(equal/2)
    smthd(existential/2)
    smthd(fertilization_strong/1)
    smthd(fertilize/2)
    smthd(fertilize_left_or_right/1)
    smthd(induction/1)
    smthd(normal/1)
    smthd(normalize_term/1)
    smthd(pw_fertilize/1)
    smthd(pwf/1)
    smthd(pwf_then_fertilize/2)
    smthd(ripple/2)
    smthd(ripple_and_cancel/1)
    smthd(step_case/1)
    smthd(sym_eval/1)
    smthd(unblock/3)
    smthd(unblock_fertilize_lazy/1)
    smthd(unblock_lazy/1)
    smthd(unblock_then_fertilize/2)
    smthd(unblock_then_wave/2)
    smthd(wave/4)
    smthd(weak_fertilize/4)
 */

/* This is the pretty-printed form
ind_strat([(y:int list)-v1::v0]) then 
  base_case(...)

*/

proof_plan([]==>x:int=>y:int list=>member(x,y)=>member(x,rev(y)),memrev,1240,ind_strat(induction(lemma(list_primitive)-[(y:int list)-v1::v0])then[base_case(normalize_term([reduction([1],[member1,equ(u(1),left)]),reduction([],[imp2,equiv(left)])])then[elementary((intro(new[x])then wfftacs)then unfold_iff then intro(explicit(0))then simplify then wfftacs)]),step_case(ripple(direction_out,wave(direction_out,[2,2],[rev2,equ(int list,left)],[])then[wave(direction_out,[2],[memapp3,imp(right)],[])then[casesplit(disjunction([x=v1 in int=>void,x=v1 in int]))then[wave(direction_out,[1],[member3,equ(u(1),left)],[])then[unblock_then_wave(direction_out,unblock_lazy([unblock(wave_front,[2,2],[member3,equ(u(1),left)]),unblock(wave_front,[2,2],[member1,equ(u(1),left)]),idtac])then wave(direction_out,[2],[or3,equiv(left)],[]))],wave(direction_out,[1],[member2,complementary,equ(u(1),left)],[])]]])then[unblock_then_fertilize(strong,unblock_fertilize_lazy([idtac])then fertilize(strong,pwf_then_fertilize(strong,fertilization_strong(v2)))),idtac])])then[base_case(equal(v3,right)then[normalize_term([reduction([],[imp1,equiv(left)]),reduction([2],[member2,equ(u(1),left)]),reduction([],[or1,equiv(left)])])then[elementary(unfold_iff then intro(explicit(0))then simplify then wfftacs)]])],dplan).
