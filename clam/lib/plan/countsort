/*  This is a proof plan for theorem:
    countsort: []==>a:int=>l:int list=>count(a,sort(l))=count(a,l)in pnat
    planner = dplan, clam_version(2.8.1), oyster_version($Id: countsort,v 1.16 1999/05/10 13:20:52 img Exp $)

    Time taken to find plan: 8490ms
    Environment:
    def(count)
    def(sort)
    def(insert)
    def(less)
    def(<=>)
    def(true)
    eqn(count3)
    eqn(count2)
    eqn(count1)
    eqn(sort2)
    eqn(sort1)
    eqn(insert3)
    eqn(insert2)
    eqn(insert1)
    eqn(less3)
    eqn(less2)
    eqn(less1)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or1)
    eqn(cnc_s)
    eqn(cnc_s)
    eqn(count3)
    eqn(count3)
    eqn(count2)
    eqn(count2)
    eqn(count1)
    eqn(sort2)
    eqn(sort2)
    eqn(sort1)
    eqn(sort1)
    eqn(insert3)
    eqn(insert3)
    eqn(insert3)
    eqn(insert2)
    eqn(insert2)
    eqn(insert2)
    eqn(insert1)
    eqn(insert1)
    eqn(less3)
    eqn(less3)
    eqn(less2)
    eqn(less1)
    eqn(imp2)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and4)
    eqn(and3)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or2)
    eqn(or1)
    eqn(or1)
    eqn(meminsert2)
    eqn(meminsert2)
    eqn(meminsert1)
    eqn(meminsert1)
    eqn(disttwo)
    eqn(disttwo)
    wave(cnc_s)
    wave(cnc_s)
    wave(count3)
    wave(count3)
    wave(count2)
    wave(count2)
    wave(count1)
    wave(sort2)
    wave(sort2)
    wave(sort1)
    wave(sort1)
    wave(insert3)
    wave(insert3)
    wave(insert3)
    wave(insert2)
    wave(insert2)
    wave(insert2)
    wave(insert1)
    wave(insert1)
    wave(less3)
    wave(less3)
    wave(less2)
    wave(less1)
    wave(imp2)
    wave(imp2)
    wave(imp1)
    wave(and4)
    wave(and4)
    wave(and3)
    wave(and3)
    wave(and2)
    wave(and1)
    wave(or4)
    wave(or3)
    wave(or2)
    wave(or2)
    wave(or1)
    wave(or1)
    wave(meminsert2)
    wave(meminsert2)
    wave(meminsert1)
    wave(meminsert1)
    wave(disttwo)
    wave(disttwo)
    red(count3)
    red(count3)
    red(count2)
    red(count2)
    red(count1)
    red(sort2)
    red(sort1)
    red(insert3)
    red(insert3)
    red(insert2)
    red(insert2)
    red(insert1)
    red(less3)
    red(less2)
    red(less1)
    red(imp2)
    red(imp1)
    red(and4)
    red(and3)
    red(and2)
    red(and1)
    red(or4)
    red(or3)
    red(or2)
    red(or1)
    trs(default)
    cancel(cnc_s)
    thm(countsort)
    thm(cnc_s)
    thm(meminsert2)
    thm(meminsert1)
    thm(disttwo)
    lemma(deceqint)
    lemma(decless2)
    lemma(succlemma)
    lemma(ipc_dp_imp_e4)
    lemma(ipc_dp_imp_e3)
    lemma(ipc_dp_imp_e2)
    lemma(cnc_s_bis)
    lemma(succ_nonzero_right)
    lemma(succ_nonzero_left)
    lemma(plesssucc2)
    lemma(plesssucc)
    lemma(list1)
    lemma(arith3)
    lemma(arith2)
    lemma(arith1)
    synth(less)
    scheme(list_primitive)
    scheme(pnat_primitive)
    mthd(base_case/1)
    mthd(generalise/2)
    mthd(ind_strat/1)
    mthd(normalize/1)
    smthd(apply_lemma/1)
    smthd(backchain_lemma/1)
    smthd(base_case/1)
    smthd(cancellation/2)
    smthd(casesplit/1)
    smthd(elementary/1)
    smthd(equal/2)
    smthd(existential/2)
    smthd(fertilization_strong/1)
    smthd(fertilize/2)
    smthd(fertilize_left_or_right/1)
    smthd(induction/1)
    smthd(normal/1)
    smthd(normalize_term/1)
    smthd(pw_fertilize/1)
    smthd(pwf/1)
    smthd(pwf_then_fertilize/2)
    smthd(ripple/2)
    smthd(ripple_and_cancel/1)
    smthd(step_case/1)
    smthd(sym_eval/1)
    smthd(unblock/3)
    smthd(unblock_fertilize_lazy/1)
    smthd(unblock_lazy/1)
    smthd(unblock_then_fertilize/2)
    smthd(unblock_then_wave/2)
    smthd(wave/4)
    smthd(weak_fertilize/4)
 */

/* This is the pretty-printed form
ind_strat([(l:int list)-v1::v0]) then 
  [generalise(...) then 
     ind_strat([(v4:int list)-v6::v5]) then 
       [base_case(...),
        base_case(...)
       ],
   base_case(...) then 
     generalise(...) then 
       ind_strat([(v3:int list)-v5::v4]) then 
         [base_case(...),
          base_case(...)
         ]
  ]

*/

proof_plan([]==>a:int=>l:int list=>count(a,sort(l))=count(a,l)in pnat,countsort,8490,ind_strat(induction(lemma(list_primitive)-[(l:int list)-v1::v0])then[base_case(normalize_term([reduction([2,1,1],[sort1,equ(int list,left)]),reduction([1,1],[count1,equ(pnat,left)]),reduction([2,1],[count1,equ(pnat,left)])])then[elementary((intro(new[a])then wfftacs)then unfold_iff then identity)]),step_case(ripple(direction_out,wave(direction_out,[2,1,1],[sort2,equ(int list,left)],[])then[casesplit(disjunction([a=v1 in int=>void,a=v1 in int]))then[wave(direction_out,[2,1],[count3,equ(pnat,left)],[]),wave(direction_out,[2,1],[count2,equ(pnat,left)],[])]])then[unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(right,in,[],v2)]))then[idtac])),unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(right,in,[1],v2)]))then[idtac]))])])then[generalise(sort(v0),v4:int list)then[ind_strat(induction(lemma(list_primitive)-[(v4:int list)-v6::v5])then[base_case(normalize_term([reduction([2,1,1],[insert1,equ(int list,left)]),reduction([],[count3,imp(right)])])then[elementary(fertilize(v3))]),step_case(ripple(direction_out,casesplit(disjunction([a=v6 in int=>void,a=v6 in int]))then[wave(direction_out,[2,1],[count3,equ(pnat,left)],[])then[casesplit(disjunction([v1<v6=>void,v1<v6]))then[wave(direction_out,[2,1,1],[insert3,equ(int list,left)],[])then[wave(direction_out,[1,1],[count3,equ(pnat,left)],[])],wave(direction_out,[2,1,1],[insert2,complementary,equ(int list,left)],[])]],wave(direction_out,[2,1],[count2,equ(pnat,left)],[])then[casesplit(disjunction([v1<v6=>void,v1<v6]))then[wave(direction_out,[2,1,1],[insert3,equ(int list,left)],[])then[wave(direction_out,[1,1],[count2,equ(pnat,left)],[])then[wave(direction_out,[],[cnc_s,imp(right)],[])]],wave(direction_out,[2,1,1],[insert2,complementary,equ(int list,left)],[])]]])then[unblock_then_fertilize(strong,unblock_fertilize_lazy([idtac])then fertilize(strong,pwf_then_fertilize(strong,fertilization_strong(v7)))),idtac,unblock_then_fertilize(strong,unblock_fertilize_lazy([idtac])then fertilize(strong,pwf_then_fertilize(strong,fertilization_strong(v7)))),idtac])])then[base_case(normalize_term([reduction([1,1],[count3,equ(pnat,left)]),reduction([],[count3,imp(right)])])then[elementary(fertilize(v8))]),base_case(equal(v8,left)then[normalize_term([reduction([1,1],[count3,equ(pnat,left)]),reduction([],[count2,imp(right)])])then[elementary(unfold_iff then identity)]])]],base_case(equal(v3,left))then[generalise(sort(v0),v3:int list)then[ind_strat(induction(lemma(list_primitive)-[(v3:int list)-v5::v4])then[base_case(normalize_term([reduction([2,1,1],[insert1,equ(int list,left)]),reduction([],[count2,imp(right)])])then[elementary(unfold_iff then identity)]),step_case(ripple(direction_out,casesplit(disjunction([a=v5 in int=>void,a=v5 in int]))then[wave(direction_out,[1,2,1],[count3,equ(pnat,left)],[])then[casesplit(disjunction([a<v5=>void,a<v5]))then[wave(direction_out,[2,1,1],[insert3,equ(int list,left)],[])then[wave(direction_out,[1,1],[count3,equ(pnat,left)],[])],wave(direction_out,[2,1,1],[insert2,complementary,equ(int list,left)],[])]],wave(direction_out,[1,2,1],[count2,equ(pnat,left)],[])then[casesplit(disjunction([a<v5=>void,a<v5]))then[wave(direction_out,[2,1,1],[insert3,equ(int list,left)],[])then[wave(direction_out,[1,1],[count2,equ(pnat,left)],[])then[unblock_then_wave(direction_out,unblock_lazy([unblock(meta_ripple,unused,unused),idtac])then wave(direction_out,[],[cnc_s,imp(right)],[]))]],wave(direction_out,[2,1,1],[insert2,complementary,equ(int list,left)],[])]]])then[unblock_then_fertilize(strong,unblock_fertilize_lazy([idtac])then fertilize(strong,pwf_then_fertilize(strong,fertilization_strong(v6)))),idtac,unblock_then_fertilize(strong,unblock_fertilize_lazy([idtac])then fertilize(strong,pwf_then_fertilize(strong,fertilization_strong(v6)))),idtac])])then[base_case(normalize_term([reduction([1,1],[count2,equ(pnat,left)]),reduction([1,1,1],[count3,equ(pnat,left)])])then[elementary(unfold_iff then identity)]),base_case(equal(v7,left)then[normalize_term([reduction([1,1],[count2,equ(pnat,left)]),reduction([1,1,1],[count2,equ(pnat,left)])])then[elementary(unfold_iff then identity)]])]]]],dplan).
