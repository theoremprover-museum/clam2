/*  This is a proof plan for theorem:
    rotlen: []==>l:int list=>p:int list=>rotate(length(l),app(l,p))=app(p,l)in int list
    planner = dplan, clam_version(2.8.1), oyster_version($Id: rotlen,v 1.16 1999/05/10 13:21:33 img Exp $)

    Time taken to find plan: 10150ms
    Environment:
    def(length)
    def(rotate)
    def(tl)
    def(hd)
    def(app)
    def(<=>)
    def(true)
    eqn(length2)
    eqn(length1)
    eqn(rotate3)
    eqn(rotate2)
    eqn(rotate1)
    eqn(tl2)
    eqn(tl1)
    eqn(hd2)
    eqn(hd1)
    eqn(app2)
    eqn(app1)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or1)
    eqn(assapp)
    eqn(assapp)
    eqn(length2)
    eqn(length1)
    eqn(length1)
    eqn(rotate3)
    eqn(rotate3)
    eqn(rotate2)
    eqn(rotate2)
    eqn(rotate2)
    eqn(rotate1)
    eqn(tl2)
    eqn(tl1)
    eqn(tl1)
    eqn(hd2)
    eqn(hd1)
    eqn(hd1)
    eqn(app2)
    eqn(app2)
    eqn(app1)
    eqn(imp2)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and4)
    eqn(and3)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or2)
    eqn(or1)
    eqn(or1)
    eqn(meminsert2)
    eqn(meminsert2)
    eqn(meminsert1)
    eqn(meminsert1)
    eqn(disttwo)
    eqn(disttwo)
    wave(assapp)
    wave(assapp)
    wave(length2)
    wave(length1)
    wave(length1)
    wave(rotate3)
    wave(rotate3)
    wave(rotate2)
    wave(rotate2)
    wave(rotate2)
    wave(rotate1)
    wave(tl2)
    wave(tl1)
    wave(tl1)
    wave(hd2)
    wave(hd1)
    wave(hd1)
    wave(app2)
    wave(app2)
    wave(app1)
    wave(imp2)
    wave(imp2)
    wave(imp1)
    wave(and4)
    wave(and4)
    wave(and3)
    wave(and3)
    wave(and2)
    wave(and1)
    wave(or4)
    wave(or3)
    wave(or2)
    wave(or2)
    wave(or1)
    wave(or1)
    wave(meminsert2)
    wave(meminsert2)
    wave(meminsert1)
    wave(meminsert1)
    wave(disttwo)
    wave(disttwo)
    red(length2)
    red(length1)
    red(rotate3)
    red(rotate3)
    red(rotate2)
    red(rotate2)
    red(rotate1)
    red(tl2)
    red(tl1)
    red(hd2)
    red(hd1)
    red(app2)
    red(app1)
    red(imp2)
    red(imp1)
    red(and4)
    red(and3)
    red(and2)
    red(and1)
    red(or4)
    red(or3)
    red(or2)
    red(or1)
    trs(default)
    thm(rotlen)
    thm(assapp)
    thm(meminsert2)
    thm(meminsert1)
    thm(disttwo)
    lemma(ipc_dp_imp_e4)
    lemma(ipc_dp_imp_e3)
    lemma(ipc_dp_imp_e2)
    lemma(cnc_s_bis)
    lemma(succ_nonzero_right)
    lemma(succ_nonzero_left)
    lemma(plesssucc2)
    lemma(plesssucc)
    lemma(list1)
    lemma(arith3)
    lemma(arith2)
    lemma(arith1)
    scheme(list_primitive)
    scheme(pnat_primitive)
    mthd(base_case/1)
    mthd(generalise/2)
    mthd(ind_strat/1)
    mthd(normalize/1)
    smthd(apply_lemma/1)
    smthd(backchain_lemma/1)
    smthd(base_case/1)
    smthd(cancellation/2)
    smthd(casesplit/1)
    smthd(elementary/1)
    smthd(equal/2)
    smthd(existential/2)
    smthd(fertilization_strong/1)
    smthd(fertilize/2)
    smthd(fertilize_left_or_right/1)
    smthd(induction/1)
    smthd(normal/1)
    smthd(normalize_term/1)
    smthd(pw_fertilize/1)
    smthd(pwf/1)
    smthd(pwf_then_fertilize/2)
    smthd(ripple/2)
    smthd(ripple_and_cancel/1)
    smthd(step_case/1)
    smthd(sym_eval/1)
    smthd(unblock/3)
    smthd(unblock_fertilize_lazy/1)
    smthd(unblock_lazy/1)
    smthd(unblock_then_fertilize/2)
    smthd(unblock_then_wave/2)
    smthd(wave/4)
    smthd(weak_fertilize/4)
 */

/* This is the pretty-printed form
ind_strat([(l:int list)-v1::v0]) then 
  [ind_strat([(p:int list)-v1::v0]) then 
     base_case(...),
   base_case(...) then 
     ind_strat([(p:int list)-v4::v3]) then 
       base_case(...)
  ]

*/

proof_plan([]==>l:int list=>p:int list=>rotate(length(l),app(l,p))=app(p,l)in int list,rotlen,10150,ind_strat(induction(lemma(list_primitive)-[(l:int list)-v1::v0])then[base_case(normalize_term([reduction([1,1,1],[length1,equ(pnat,left)]),reduction([1,1],[rotate1,equ(int list,left)]),reduction([1,1],[app1,equ(int list,left)])])),step_case(ripple(direction_out,wave(direction_out,[2,1,1],[app2,equ(int list,left)],[])then[wave(direction_out,[1,1,1],[length2,equ(pnat,left)],[])])then[ripple(direction_in_or_out,wave(direction_in_or_out,[1,1],[rotate2,equ(int list,left)],[])then[wave(direction_in_or_out,[1,2,1,1],[tl2,equ(int list,left)],[])then[wave(direction_in_or_out,[2,1,1],[assapp,equ(int list,right)],[])]])then[unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(left,in,[],v2)]))then[idtac]))]])])then[ind_strat(induction(lemma(list_primitive)-[(p:int list)-v1::v0])then[base_case(normalize_term([reduction([2,1],[app1,equ(int list,left)])])then[elementary(unfold_iff then identity)]),step_case(ripple(direction_out,wave(direction_out,[2,1],[app2,equ(int list,left)],[]))then[unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(right,in,[2],v2)]))then[idtac]))])])then[base_case(elementary(unfold_iff then identity))],base_case(normalize_term([reduction([1,2,1,1,1],[hd2,equ(int,left)])]))then[ind_strat(induction(lemma(list_primitive)-[(p:int list)-v4::v3])then[base_case(normalize_term([reduction([1,1,1],[app1,equ(int list,left)]),reduction([1,1],[app2,equ(int list,left)]),reduction([2,1,1],[app1,equ(int list,left)]),reduction([2,1],[app1,equ(int list,left)])])then[elementary(unfold_iff then identity)]),step_case(ripple(direction_out,wave(direction_out,[2,1],[app2,equ(int list,left)],[])then[wave(direction_out,[1,1,1],[app2,equ(int list,left)],[])then[wave(direction_out,[1,1],[app2,equ(int list,left)],[])]])then[unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(left,in,[2],v5)]))then[idtac]))])])then[base_case(elementary(unfold_iff then identity))]]],dplan).
