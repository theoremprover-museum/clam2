/*  This is a proof plan for theorem:
    binom_one: []==>x:pnat=>minus(binom(x,s(0)),x)=0 in pnat
    planner = dplan, clam_version(2.8.1), oyster_version($Id: binom_one,v 1.15 1999/05/10 13:20:49 img Exp $)

    Time taken to find plan: 7270ms
    Environment:
    def(binom)
    def(plus)
    def(minus)
    def(pred)
    def(<=>)
    def(true)
    eqn(binom3)
    eqn(binom2)
    eqn(binom1)
    eqn(plus2)
    eqn(plus1)
    eqn(minus2)
    eqn(minus1)
    eqn(pred2)
    eqn(pred1)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or1)
    eqn(binom3)
    eqn(binom3)
    eqn(binom2)
    eqn(binom1)
    eqn(plus2)
    eqn(plus2)
    eqn(plus1)
    eqn(minus2)
    eqn(minus2)
    eqn(minus1)
    eqn(pred2)
    eqn(pred1)
    eqn(pred1)
    eqn(imp2)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and4)
    eqn(and3)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or2)
    eqn(or1)
    eqn(or1)
    wave(binom3)
    wave(binom3)
    wave(binom2)
    wave(binom1)
    wave(plus2)
    wave(plus2)
    wave(plus1)
    wave(minus2)
    wave(minus2)
    wave(minus1)
    wave(pred2)
    wave(pred1)
    wave(pred1)
    wave(imp2)
    wave(imp2)
    wave(imp1)
    wave(and4)
    wave(and4)
    wave(and3)
    wave(and3)
    wave(and2)
    wave(and1)
    wave(or4)
    wave(or3)
    wave(or2)
    wave(or2)
    wave(or1)
    wave(or1)
    red(binom3)
    red(binom2)
    red(binom1)
    red(plus2)
    red(plus1)
    red(minus2)
    red(minus1)
    red(pred2)
    red(pred1)
    red(imp2)
    red(imp1)
    red(and4)
    red(and3)
    red(and2)
    red(and1)
    red(or4)
    red(or3)
    red(or2)
    red(or1)
    trs(default)
    thm(binom_one)
    lemma(ipc_dp_imp_e4)
    lemma(ipc_dp_imp_e3)
    lemma(ipc_dp_imp_e2)
    lemma(cnc_s_bis)
    lemma(succ_nonzero_right)
    lemma(succ_nonzero_left)
    lemma(plesssucc2)
    lemma(plesssucc)
    lemma(list1)
    lemma(arith3)
    lemma(arith2)
    lemma(arith1)
    synth(binom)
    scheme(list_primitive)
    scheme(pnat_primitive)
    mthd(base_case/1)
    mthd(generalise/2)
    mthd(ind_strat/1)
    mthd(normalize/1)
    smthd(apply_lemma/1)
    smthd(backchain_lemma/1)
    smthd(base_case/1)
    smthd(cancellation/2)
    smthd(casesplit/1)
    smthd(elementary/1)
    smthd(equal/2)
    smthd(existential/2)
    smthd(fertilization_strong/1)
    smthd(fertilize/2)
    smthd(fertilize_left_or_right/1)
    smthd(induction/1)
    smthd(normal/1)
    smthd(normalize_term/1)
    smthd(pw_fertilize/1)
    smthd(pwf/1)
    smthd(pwf_then_fertilize/2)
    smthd(ripple/2)
    smthd(ripple_and_cancel/1)
    smthd(step_case/1)
    smthd(sym_eval/1)
    smthd(unblock/3)
    smthd(unblock_fertilize_lazy/1)
    smthd(unblock_lazy/1)
    smthd(unblock_then_fertilize/2)
    smthd(unblock_then_wave/2)
    smthd(wave/4)
    smthd(weak_fertilize/4)
 */

/* This is the pretty-printed form
ind_strat([(x:pnat)-s(v0)]) then 
  base_case(...) then 
    generalise(...) then 
      ind_strat([(v0:pnat)-s(v3)]) then 
        [ind_strat([(v2:pnat)-s(v3)]) then 
           base_case(...) then 
             ind_strat([(v3:pnat)-s(v5)]) then 
               base_case(...) then 
                 ind_strat([(v5:pnat)-s(v7)]) then 
                   base_case(...),
         base_case(...)
        ]

*/

proof_plan([]==>x:pnat=>minus(binom(x,s(0)),x)=0 in pnat,binom_one,7270,ind_strat(induction(lemma(pnat_primitive)-[(x:pnat)-s(v0)])then[base_case(normalize_term([reduction([1,1],[minus1,equ(pnat,left)]),reduction([1,1],[binom2,equ(pnat,left)])])then[elementary(unfold_iff then identity)]),step_case(ripple(direction_out,wave(direction_out,[1,1],[minus2,equ(pnat,left)],[])then[wave(direction_out,[1,1,1,1],[binom3,equ(pnat,left)],[])])then[unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(right,in,[],v1)]))then[idtac]))])])then[base_case(normalize_term([reduction([2,1,1,1,1],[binom1,equ(pnat,left)])]))then[generalise(binom(v0,s(0)),v2:pnat)then[ind_strat(induction(lemma(pnat_primitive)-[(v0:pnat)-s(v3)])then[base_case(normalize_term([reduction([1,1,1],[minus1,equ(pnat,left)]),reduction([2,1],[minus1,equ(pnat,left)])])),step_case(ripple(direction_out,wave(direction_out,[2,1],[minus2,equ(pnat,left)],[])then[wave(direction_out,[1,1,1],[minus2,equ(pnat,left)],[])])then[unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(right,in,[1],v4)]))then[idtac]))])])then[ind_strat(induction(lemma(pnat_primitive)-[(v2:pnat)-s(v3)])then[base_case(normalize_term([reduction([1,1,1],[plus1,equ(pnat,left)]),reduction([1,1],[pred2,equ(pnat,left)])])then[elementary(unfold_iff then identity)]),step_case(ripple(direction_out,wave(direction_out,[1,1,1],[plus2,equ(pnat,left)],[]))then[unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(right,in,[1],v4)]))then[idtac]))])])then[base_case(normalize_term([reduction([1,1],[pred2,equ(pnat,left)])]))then[ind_strat(induction(lemma(pnat_primitive)-[(v3:pnat)-s(v5)])then[base_case(normalize_term([reduction([1,1],[plus1,equ(pnat,left)]),reduction([1,1,2,1],[plus1,equ(pnat,left)]),reduction([1,2,1],[pred2,equ(pnat,left)])])then[elementary(unfold_iff then identity)]),step_case(ripple(direction_out,wave(direction_out,[1,1],[plus2,equ(pnat,left)],[])then[wave(direction_out,[1,1,2,1],[plus2,equ(pnat,left)],[])])then[unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(left,in,[1],v6)]))then[idtac]))])])then[base_case(normalize_term([reduction([1,2,1],[pred2,equ(pnat,left)])]))then[ind_strat(induction(lemma(pnat_primitive)-[(v5:pnat)-s(v7)])then[base_case(normalize_term([reduction([1,1,1,1,1],[plus1,equ(pnat,left)]),reduction([1,1,1,1],[pred2,equ(pnat,left)]),reduction([1,2,1],[plus1,equ(pnat,left)])])then[elementary(unfold_iff then identity)]),step_case(ripple(direction_out,wave(direction_out,[1,2,1],[plus2,equ(pnat,left)],[])then[wave(direction_out,[1,1,1,1,1],[plus2,equ(pnat,left)],[])])then[idtac])])then[base_case(normalize_term([reduction([1,1,1,1],[pred2,equ(pnat,left)])])then[elementary(unfold_iff then identity)])]]]]],base_case(elementary((intro(new[v2])then wfftacs)then unfold_iff then identity))]]]],dplan).
