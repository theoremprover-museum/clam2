/*  This is a proof plan for theorem:
    expplus: []==>n:pnat=>i:pnat=>j:pnat=>exp(n,plus(i,j))=times(exp(n,i),exp(n,j))in pnat
    planner = dplan, clam_version(2.8.1), oyster_version($Id: expplus,v 1.15 1999/05/10 13:20:58 img Exp $)

    Time taken to find plan: 5340ms
    Environment:
    def(exp)
    def(times)
    def(plus)
    def(<=>)
    def(true)
    eqn(exp2)
    eqn(exp1)
    eqn(times2)
    eqn(times1)
    eqn(plus2)
    eqn(plus1)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or1)
    eqn(dist)
    eqn(dist)
    eqn(disttwo)
    eqn(disttwo)
    eqn(exp2)
    eqn(exp2)
    eqn(exp1)
    eqn(times2)
    eqn(times2)
    eqn(times1)
    eqn(plus2)
    eqn(plus2)
    eqn(plus1)
    eqn(imp2)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and4)
    eqn(and3)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or2)
    eqn(or1)
    eqn(or1)
    wave(dist)
    wave(dist)
    wave(disttwo)
    wave(disttwo)
    wave(exp2)
    wave(exp2)
    wave(exp1)
    wave(times2)
    wave(times2)
    wave(times1)
    wave(plus2)
    wave(plus2)
    wave(plus1)
    wave(imp2)
    wave(imp2)
    wave(imp1)
    wave(and4)
    wave(and4)
    wave(and3)
    wave(and3)
    wave(and2)
    wave(and1)
    wave(or4)
    wave(or3)
    wave(or2)
    wave(or2)
    wave(or1)
    wave(or1)
    red(exp2)
    red(exp1)
    red(times2)
    red(times1)
    red(plus2)
    red(plus1)
    red(imp2)
    red(imp1)
    red(and4)
    red(and3)
    red(and2)
    red(and1)
    red(or4)
    red(or3)
    red(or2)
    red(or1)
    trs(default)
    thm(expplus)
    thm(dist)
    thm(disttwo)
    lemma(succlemma3)
    lemma(ipc_dp_imp_e4)
    lemma(ipc_dp_imp_e3)
    lemma(ipc_dp_imp_e2)
    lemma(cnc_s_bis)
    lemma(succ_nonzero_right)
    lemma(succ_nonzero_left)
    lemma(plesssucc2)
    lemma(plesssucc)
    lemma(list1)
    lemma(arith3)
    lemma(arith2)
    lemma(arith1)
    scheme(plusind)
    scheme(list_primitive)
    scheme(pnat_primitive)
    scheme(twos)
    mthd(base_case/1)
    mthd(generalise/2)
    mthd(ind_strat/1)
    mthd(normalize/1)
    smthd(apply_lemma/1)
    smthd(backchain_lemma/1)
    smthd(base_case/1)
    smthd(cancellation/2)
    smthd(casesplit/1)
    smthd(elementary/1)
    smthd(equal/2)
    smthd(existential/2)
    smthd(fertilization_strong/1)
    smthd(fertilize/2)
    smthd(fertilize_left_or_right/1)
    smthd(induction/1)
    smthd(normal/1)
    smthd(normalize_term/1)
    smthd(pw_fertilize/1)
    smthd(pwf/1)
    smthd(pwf_then_fertilize/2)
    smthd(ripple/2)
    smthd(ripple_and_cancel/1)
    smthd(step_case/1)
    smthd(sym_eval/1)
    smthd(unblock/3)
    smthd(unblock_fertilize_lazy/1)
    smthd(unblock_lazy/1)
    smthd(unblock_then_fertilize/2)
    smthd(unblock_then_wave/2)
    smthd(wave/4)
    smthd(weak_fertilize/4)
 */

/* This is the pretty-printed form
ind_strat([(i:pnat)-s(v0)]) then 
  generalise(...) then 
    generalise(...) then 
      ind_strat([(n:pnat)-s(v4)]) then 
        base_case(...)

*/

proof_plan([]==>n:pnat=>i:pnat=>j:pnat=>exp(n,plus(i,j))=times(exp(n,i),exp(n,j))in pnat,expplus,5340,ind_strat(induction(lemma(pnat_primitive)-[(i:pnat)-s(v0)])then[base_case(normalize_term([reduction([2,1,1],[plus1,equ(pnat,left)]),reduction([1,2,1],[exp1,equ(pnat,left)]),reduction([2,1],[times2,equ(pnat,left)]),reduction([1,2,1],[times1,equ(pnat,left)]),reduction([2,1],[plus1,equ(pnat,left)])])then[elementary((intro(new[n])then wfftacs)then(intro(new[j])then wfftacs)then unfold_iff then identity)]),step_case(ripple(direction_out,wave(direction_out,[1,2,1],[exp2,equ(pnat,left)],[])then[wave(direction_out,[2,1,1],[plus2,equ(pnat,left)],[])then[wave(direction_out,[1,1],[exp2,equ(pnat,left)],[])]])then[unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(left,in,[2],v1)]))then[idtac]))])])then[generalise(exp(n,j),v2:pnat)then[generalise(exp(n,v0),v3:pnat)then[ind_strat(induction(lemma(pnat_primitive)-[(n:pnat)-s(v4)])then[base_case(normalize_term([reduction([1,1],[times1,equ(pnat,left)]),reduction([1,2,1],[times1,equ(pnat,left)]),reduction([2,1],[times1,equ(pnat,left)])])then[elementary((intro(new[v3])then wfftacs)then(intro(new[v2])then wfftacs)then(intro(new[j])then wfftacs)then unfold_iff then identity)]),step_case(ripple(direction_out,wave(direction_out,[1,1],[times2,equ(pnat,left)],[])then[wave(direction_out,[1,2,1],[times2,equ(pnat,left)],[])then[wave(direction_out,[2,1],[disttwo,equ(pnat,left)],[])]])then[unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(right,in,[1],v5)]))then[idtac]))])])then[base_case(elementary((intro(new[v3])then wfftacs)then(intro(new[v2])then wfftacs)then(intro(new[j])then wfftacs)then unfold_iff then identity))]]]],dplan).
