/*  This is a proof plan for theorem:
    leqnth: []==>l:int list=>n:pnat=>leq(length(nth(n,l)),length(l))
    planner = dplan, clam_version(2.8.1), oyster_version($Id: leqnth,v 1.16 1999/05/10 13:21:10 img Exp $)

    Time taken to find plan: 1550ms
    Environment:
    def(nth)
    def(length)
    def(leq)
    def(<=>)
    def(true)
    eqn(nth3)
    eqn(nth2)
    eqn(nth1)
    eqn(length2)
    eqn(length1)
    eqn(leq3)
    eqn(leq2)
    eqn(leq1)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or1)
    eqn(nth3)
    eqn(nth2)
    eqn(nth1)
    eqn(length2)
    eqn(length1)
    eqn(length1)
    eqn(leq3)
    eqn(leq3)
    eqn(leq2)
    eqn(leq1)
    eqn(imp2)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and4)
    eqn(and3)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or2)
    eqn(or1)
    eqn(or1)
    eqn(disttwo)
    eqn(disttwo)
    wave(nth3)
    wave(nth2)
    wave(nth1)
    wave(length2)
    wave(length1)
    wave(length1)
    wave(leq3)
    wave(leq3)
    wave(leq2)
    wave(leq1)
    wave(imp2)
    wave(imp2)
    wave(imp1)
    wave(and4)
    wave(and4)
    wave(and3)
    wave(and3)
    wave(and2)
    wave(and1)
    wave(or4)
    wave(or3)
    wave(or2)
    wave(or2)
    wave(or1)
    wave(or1)
    wave(disttwo)
    wave(disttwo)
    red(nth3)
    red(nth2)
    red(nth1)
    red(length2)
    red(length1)
    red(leq3)
    red(leq2)
    red(leq1)
    red(imp2)
    red(imp1)
    red(and4)
    red(and3)
    red(and2)
    red(and1)
    red(or4)
    red(or3)
    red(or2)
    red(or1)
    trs(default)
    thm(leqnth)
    thm(disttwo)
    lemma(ipc_dp_imp_e4)
    lemma(ipc_dp_imp_e3)
    lemma(ipc_dp_imp_e2)
    lemma(cnc_s_bis)
    lemma(succ_nonzero_right)
    lemma(succ_nonzero_left)
    lemma(plesssucc2)
    lemma(plesssucc)
    lemma(list1)
    lemma(arith3)
    lemma(arith2)
    lemma(arith1)
    synth(nth)
    synth(leq)
    scheme(nat_list_pair)
    scheme(list_primitive)
    scheme(pnat_primitive)
    mthd(base_case/1)
    mthd(generalise/2)
    mthd(ind_strat/1)
    mthd(normalize/1)
    smthd(apply_lemma/1)
    smthd(backchain_lemma/1)
    smthd(base_case/1)
    smthd(cancellation/2)
    smthd(casesplit/1)
    smthd(elementary/1)
    smthd(equal/2)
    smthd(existential/2)
    smthd(fertilization_strong/1)
    smthd(fertilize/2)
    smthd(fertilize_left_or_right/1)
    smthd(induction/1)
    smthd(normal/1)
    smthd(normalize_term/1)
    smthd(pw_fertilize/1)
    smthd(pwf/1)
    smthd(pwf_then_fertilize/2)
    smthd(ripple/2)
    smthd(ripple_and_cancel/1)
    smthd(step_case/1)
    smthd(sym_eval/1)
    smthd(unblock/3)
    smthd(unblock_fertilize_lazy/1)
    smthd(unblock_lazy/1)
    smthd(unblock_then_fertilize/2)
    smthd(unblock_then_wave/2)
    smthd(wave/4)
    smthd(weak_fertilize/4)
 */

/* This is the pretty-printed form
ind_strat([(l:int list)-v2::v1,(n:pnat)-s(v0)]) then 
  [generalise(...) then 
     ind_strat([(v1:pnat)-s(v2)]),
   generalise(...) then 
     ind_strat([(v4:pnat)-s(v5)])
  ]

*/

proof_plan([]==>l:int list=>n:pnat=>leq(length(nth(n,l)),length(l)),leqnth,1550,ind_strat(induction(lemma(nat_list_pair)-[(l:int list)-v2::v1,(n:pnat)-s(v0)])then[base_case(normalize_term([reduction([1,1],[nth2,equ(int list,left)]),reduction([1],[length1,equ(pnat,left)]),reduction([],[leq1,equ(u(1),left)])])then[elementary(unfold_iff then intro(explicit(0))then simplify then wfftacs)]),base_case(normalize_term([reduction([1,1],[nth1,equ(int list,left)])])),step_case(ripple(direction_out,wave(direction_out,[2],[length2,equ(pnat,left)],[])then[wave(direction_out,[1,1],[nth3,equ(int list,left)],[])])then[unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(left,leq,[],v3)]))then[idtac]))])])then[generalise(length(v0),v1:pnat)then[ind_strat(induction(lemma(pnat_primitive)-[(v1:pnat)-s(v2)])then[base_case(normalize_term([reduction([],[leq1,equ(u(1),left)])])then[elementary(unfold_iff then intro(explicit(0))then simplify then wfftacs)]),step_case(ripple(direction_out,wave(direction_out,[],[leq3,equ(u(1),left)],[]))then[unblock_then_fertilize(strong,unblock_fertilize_lazy([idtac])then fertilize(strong,pwf_then_fertilize(strong,fertilization_strong(v3))))])])],generalise(length(v1),v4:pnat)then[ind_strat(induction(lemma(pnat_primitive)-[(v4:pnat)-s(v5)])then[base_case(normalize_term([reduction([],[leq1,equ(u(1),left)])])then[elementary(unfold_iff then intro(explicit(0))then simplify then wfftacs)]),step_case(ripple(direction_out,unblock_then_wave(direction_out,unblock_lazy([unblock(meta_ripple,unused,unused),idtac])then wave(direction_out,[],[leq3,equ(u(1),left)],[])))then[unblock_then_fertilize(strong,unblock_fertilize_lazy([idtac])then fertilize(strong,pwf_then_fertilize(strong,fertilization_strong(v6))))])])]],dplan).
