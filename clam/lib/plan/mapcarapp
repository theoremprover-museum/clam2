/*  This is a proof plan for theorem:
    mapcarapp: []==>f:(int=>int)=>l1:int list=>l2:int list=>mapcar(app(l1,l2),f)=app(mapcar(l1,f),mapcar(l2,f))in int list
    planner = dplan, clam_version(2.8.1), oyster_version($Id: mapcarapp,v 1.15 1999/05/10 13:21:15 img Exp $)

    Time taken to find plan: 2220ms
    Environment:
    def(app)
    def(mapcar)
    def(<=>)
    def(true)
    eqn(app2)
    eqn(app1)
    eqn(mapcar2)
    eqn(mapcar1)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or1)
    eqn(app2)
    eqn(app2)
    eqn(app1)
    eqn(mapcar2)
    eqn(mapcar2)
    eqn(mapcar1)
    eqn(imp2)
    eqn(imp2)
    eqn(imp1)
    eqn(and4)
    eqn(and4)
    eqn(and3)
    eqn(and3)
    eqn(and2)
    eqn(and1)
    eqn(or4)
    eqn(or3)
    eqn(or2)
    eqn(or2)
    eqn(or1)
    eqn(or1)
    eqn(disttwo)
    eqn(disttwo)
    wave(app2)
    wave(app2)
    wave(app1)
    wave(mapcar2)
    wave(mapcar2)
    wave(mapcar1)
    wave(imp2)
    wave(imp2)
    wave(imp1)
    wave(and4)
    wave(and4)
    wave(and3)
    wave(and3)
    wave(and2)
    wave(and1)
    wave(or4)
    wave(or3)
    wave(or2)
    wave(or2)
    wave(or1)
    wave(or1)
    wave(disttwo)
    wave(disttwo)
    red(app2)
    red(app1)
    red(mapcar2)
    red(mapcar1)
    red(imp2)
    red(imp1)
    red(and4)
    red(and3)
    red(and2)
    red(and1)
    red(or4)
    red(or3)
    red(or2)
    red(or1)
    trs(default)
    thm(mapcarapp)
    thm(disttwo)
    lemma(ipc_dp_imp_e4)
    lemma(ipc_dp_imp_e3)
    lemma(ipc_dp_imp_e2)
    lemma(cnc_s_bis)
    lemma(succ_nonzero_right)
    lemma(succ_nonzero_left)
    lemma(plesssucc2)
    lemma(plesssucc)
    lemma(list1)
    lemma(arith3)
    lemma(arith2)
    lemma(arith1)
    scheme(list_primitive)
    scheme(pnat_primitive)
    mthd(base_case/1)
    mthd(generalise/2)
    mthd(ind_strat/1)
    mthd(normalize/1)
    smthd(apply_lemma/1)
    smthd(backchain_lemma/1)
    smthd(base_case/1)
    smthd(cancellation/2)
    smthd(casesplit/1)
    smthd(elementary/1)
    smthd(equal/2)
    smthd(existential/2)
    smthd(fertilization_strong/1)
    smthd(fertilize/2)
    smthd(fertilize_left_or_right/1)
    smthd(induction/1)
    smthd(normal/1)
    smthd(normalize_term/1)
    smthd(pw_fertilize/1)
    smthd(pwf/1)
    smthd(pwf_then_fertilize/2)
    smthd(ripple/2)
    smthd(ripple_and_cancel/1)
    smthd(step_case/1)
    smthd(sym_eval/1)
    smthd(unblock/3)
    smthd(unblock_fertilize_lazy/1)
    smthd(unblock_lazy/1)
    smthd(unblock_then_fertilize/2)
    smthd(unblock_then_wave/2)
    smthd(wave/4)
    smthd(weak_fertilize/4)
 */

/* This is the pretty-printed form
ind_strat([(l1:int list)-v1::v0]) then 
  base_case(...)

*/

proof_plan([]==>f:(int=>int)=>l1:int list=>l2:int list=>mapcar(app(l1,l2),f)=app(mapcar(l1,f),mapcar(l2,f))in int list,mapcarapp,2220,ind_strat(induction(lemma(list_primitive)-[(l1:int list)-v1::v0])then[base_case(normalize_term([reduction([1,1,1],[app1,equ(int list,left)]),reduction([1,2,1],[mapcar1,equ(int list,left)]),reduction([2,1],[app1,equ(int list,left)])])then[elementary((intro(new[f])then wfftacs)then(intro(new[l2])then wfftacs)then unfold_iff then identity)]),step_case(ripple(direction_out,wave(direction_out,[1,2,1],[mapcar2,equ(int list,left)],[])then[wave(direction_out,[2,1],[app2,equ(int list,left)],[])then[wave(direction_out,[1,1,1],[app2,equ(int list,left)],[])then[wave(direction_out,[1,1],[mapcar2,equ(int list,left)],[])]]])then[unblock_then_fertilize(weak,unblock_fertilize_lazy([idtac])then fertilize(weak,pwf_then_fertilize(weak,fertilize_left_or_right([weak_fertilize(right,in,[2],v2)]))then[idtac]))])])then[base_case(elementary((intro(new[f])then wfftacs)then(intro(new[l2])then wfftacs)then unfold_iff then identity))],dplan).
